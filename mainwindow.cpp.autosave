#include <bits/stdc++.h> //简单粗暴万能头
#include "mainwindow.h"
#include <QPainter>
#include <QPixmap>
#include <QLabel>
#include <QDebug>
#include <QPaintEvent>
#include <QPushButton>
#include <QMediaPlayer>
#include "Structure.h"
#include "StationOne.h"
#include "StationTwo.h"
#include "StationThree.h"
#include "MainStation.h"

using namespace std;

//鼠标点击区域宏
#define MouseClickRegion(X,Width,Y,Height) \
    (ev->x()>=(X) && ev->x()<=(X)+(Width) && ev->y()>=(Y) && ev->y()<=(Y)+(Height))

//计算两点之间距离宏
#define DistanceBetPoints(X1,Y1,X2,Y2) \
    abs(sqrt((((X1)-(X2))*((X1)-(X2)))+(((Y1)-(Y2))*((Y1)-(Y2)))))

//插入敌舰
#define NewEnemy(PathNum,StartPoint,EnemyId) \
    EnemyVec.push_back(new Enemy(point[PathNum],PathLength[PathNum],X40(start[StartPoint].x,start[StartPoint].y),EnemyId));

//确定路径点坐标
#define X40(X,Y)((X)-1)*40+10,((Y)-1)*40+10

//判断金币是否足够并且刷新金币标签
inline bool MainWindow::DeductionCoins(int coins){
    if(this->coins-coins<0) return true; //金币足够
    this->coins-=coins; //扣除金币
    coinslable->setText(QString("金币：%1").arg(this->coins)); //刷新金币标签
    return false;
}

//构造游戏界面
MainWindow::MainWindow(int LevelNum):LevelNum(LevelNum){
    setWindowTitle("Forest of Darkness"); //标题
    setFixedSize(1040,640); //窗口大小

    //生命值标签
    QLabel *lifelable=new QLabel(this);
    lifelable->setText(QString("生命：%1").arg(life));
    lifelable->setFont(QFont("黑体",20));
    lifelable->setGeometry(15,80,195,60);
    lifelable->setStyleSheet("color:white");

    //金币标签
    coinslable->setText(QString("金币：%1").arg(coins));
    coinslable->setFont(QFont("黑体",20));
    coinslable->setStyleSheet("color:white");
    coinslable->move(15,40);

    //游戏胜利标签
    QLabel*winlable=new QLabel(this);
    winlable->setText(QString("You Win!"));
    winlable->setFont(QFont("黑体",120));
    winlable->move(180,180);
    winlable->hide();

    //防御站攻击范围显示状态按钮
     QPushButton* distancerange=new QPushButton(this);
     distancerange->setText("显示攻击范围");
     distancerange->setFont(QFont("黑体",12));
     distancerange->setStyleSheet("color:white");
     distancerange->setGeometry(15,140,150,45);

     //根据改变命令使防御站攻击范围显示或关闭
         connect(distancerange,&QPushButton::clicked,[=](){
             if(DisplayAllRange){
                 DisplayAllRange=false;
                 distancerange->setText("显示攻击范围");
             }
             else{
                 DisplayAllRange=true;
                 distancerange->setText("隐藏攻击范围");
             };
             update(); //绘制
         });

         //敌舰定时器
         QTimer*timer2=new QTimer(this);
         timer2->start(2000);
         
    //根据关卡确定执行敌舰的路径方案
    connect(timer2,&QTimer::timeout,[=](){
        switch(LevelNum){
        case 0:
        {
            //设置路径点
            d* Route1[]={new d(X40(8,6)),new d(X40(2,6)),new d(X40(2,13)),new d(X40(19,13)),new d(X40(19,9)),new d(home->x,home->y)};
            d* Route2[]={new d(X40(20,5)),new d(X40(14,5)),new d(X40(14,9)),new d(X40(8,9)),new d(X40(8,6)),new d(X40(2,6)),new d(X40(2,13)),new d(X40(9,13)),new d(X40(19,13)),new d(X40(19,9)),new d(home->x,home->y)};

            //敌舰出发点
            d start[]={d(8,0),d(20,0),d(8,-1),d(20,-1)};

            //每条路径结点个数
            int PathLength[]={sizeof(Route1)/sizeof(d*),sizeof(Route1)/sizeof(d*)};

            //使用预设方案
            IronEnemProgDefa(Route1,Route2,start,PathLength,winlable);

            break;
        }
        case 1:
        {
            d* Route1[]={new d(X40(4,8)),new d(X40(20,8)),new d(X40(20,13)),new d(X40(6,13)),new d(home->x,home->y)};
            d* Route2[]={new d(X40(11,8)),new d(X40(20,8)),new d(X40(20,13)),new d(X40(6,13)),new d(home->x,home->y)};

            d start[]={d(4,0),d(11,0),d(4,-1),d(11,-1)};

            int PathLength[]={sizeof(Route1)/sizeof(d*),sizeof(Route1)/sizeof(d*)};

            IronEnemProgDefa(Route1,Route2,start,PathLength,winlable);

            break;
        }
        case 2:
        {
            d* Route1[]={new d(X40(12,9)),new d(X40(8,9)),new d(X40(8,0)),new d(home->x,home->y)};
            d* Route2[]={new d(X40(12,9)),new d(X40(16,9)),new d(X40(16,0)),new d(home->x,home->y)};

            d start[]={d(12,16),d(12,16),d(12,17),d(12,18)};

            int PathLength[]={sizeof(Route1)/sizeof(d*),sizeof(Route1)/sizeof(d*)};

            IronEnemProgDefa(Route1,Route2,start,PathLength,winlable);

            break;
        }
        }
    });

    //定时器执行防御站父类数组的活动函数
    QTimer* timer=new QTimer(this);
    timer->start(120);

    connect(timer,&QTimer::timeout,[=](){
        for(auto stat:StationparVec){ //遍历防御站
            if(!stat->GetGoalsEnemy()){
                for(int i=EnemyVec.size()-1;i>=0;i--)
                    if(DistanceBetPoints(stat->GetUpLeftX()+40,stat->GetUpLeftY()+40,EnemyVec.at(i)->GetX()+(EnemyVec.at(i)->GetWidth()>>1),EnemyVec.at(i)->GetY()+(EnemyVec.at(i)->GetHeight()>>1))<=stat->GetRange()){
                        stat->SetGoalEnemy(EnemyVec.at(i));
                        break;
                    }
            }
            else //若防御站范围内有目标敌舰则进行攻击
                if(DistanceBetPoints(stat->GetUpLeftX()+40,stat->GetUpLeftY()+40,stat->GetGoalsEnemy()->GetX()+(stat->GetGoalsEnemy()->GetWidth()>>1),stat->GetGoalsEnemy()->GetY()+(stat->GetGoalsEnemy()->GetHeight()>>1))<=stat->GetRange()){
                    //根据防御站的目标敌舰计算旋转角度
                    stat->SetAngle(atan(stat->GetGoalsEnemy()->GetY()-stat->GetUpLeftX())*180/3.14159);
                    stat->NewBullet(); //若防御站有目标敌舰则创建子弹
                }
            if(stat->GetGoalsEnemy())
                    if(DistanceBetPoints(stat->GetUpLeftX()+40,stat->GetUpLeftY()+40,stat->GetGoalsEnemy()->GetX()+(stat->GetGoalsEnemy()->GetWidth()>>1),stat->GetGoalsEnemy()->GetY()+(stat->GetGoalsEnemy()->GetHeight()>>1))>stat->GetRange())
                    stat->SetGoalEnemy(NULL); //超出范围则将目标敌舰设为空
        }

                   //敌舰运动
                   for(auto Enemi=EnemyVec.begin();Enemi!=EnemyVec.end();Enemi++){
                   if((*Enemi)->Move()){ //敌舰到达终点
                   delete *Enemi;
                   EnemyVec.erase(Enemi); //删除此敌舰
                   life--; //玩家生命数-1
                   lifelable->setText(QString("生命：%1").arg(life));
                   if(life<=0) this->close(); //若生命值降为0则关闭窗口
                   break;
                   }
                   }

                  //防御站子弹运动
                  for(auto stat:StationparVec){
                  stat->BulletMove();
                  }

                    //判断子弹是否击中敌舰
                    for(auto stat:StationparVec){
                        auto &bullvec=stat->GetBulletVec(); //存储临时子弹
                        for(auto bullit=bullvec.begin();bullit!=bullvec.end();bullit++)
                            for(auto enemit=EnemyVec.begin();enemit!=EnemyVec.end();enemit++)
                                if((*bullit)->GetX()+(stat->GetBulletWidth()>>1)>=(*enemit)->GetX() && (*bullit)->GetX()<=(*enemit)->GetX()+(*enemit)->GetWidth() && (*bullit)->GetY()+(stat->GetBulletHeight()>>1)>=(*enemit)->GetY() && (*bullit)->GetY()<=(*enemit)->GetY()+(*enemit)->GetHeight()){
                                    //子弹击中敌舰则删除子弹、减少敌人血量、设置爆炸效果
                                    bullvec.erase(bullit);
                                    (*enemit)->SetHp((*enemit)->GetHp()-stat->GetAttack());
                                    ExploEffect.push_back(new Explo(d((*enemit)->GetX()+((*enemit)->GetWidth()>>1),(*enemit)->GetY()+((*enemit)->GetHeight()>>1)),stat->GetExplRangeWidth(),stat->GetExplRangeHeight()));
                                    if((*enemit)->GetHp()<=0){
                                        //敌舰生命值降为0时，判断其他防御站目标敌舰是否和当前防御站消灭的敌舰重复,并删除被消灭敌舰
                                        for(auto stat2:StationparVec)
                                            if(stat2->GetGoalsEnemy()==*enemit)
                                                stat2->SetGoalEnemy(NULL);
                                        EnemyVec.erase(enemit);
                                        coins+=PlusCoins; //击败敌舰，金币数增加
                                        coinslable->setText(QString("金币：%1").arg(coins)); //刷新金币标签
                                    }
                        goto Occasion;
         }
        Occasion:;
 }

    //爆炸效果
    for(auto expl=ExploEffect.begin();expl!=ExploEffect.end();expl++){
        if((*expl)->index>=5){
            ExploEffect.erase(expl);
            break;
        }
        (*expl)->index++;
    }
    update(); //绘制
});
}

//预设的两个敌舰路径方案
void MainWindow::IronEnemProgDefa(d **Route1, d **Route2, d *start, int *PathLength, QLabel *winlable){
    d**point[]={Route1,Route2};
    //根据计数器在不同时刻不同路径插入不同敌舰
    if(counter>=1 && counter<=10){
        NewEnemy(0,0,1); //路径0，出发点0，敌舰1
    }
    else if(counter>10 && counter<=30){
        NewEnemy(0,0,2);
        NewEnemy(1,1,1);
    }
    else if(counter>30 && counter<=32){
        NewEnemy(0,0,5);
        NewEnemy(1,1,5);
    }
    else if(counter>32 && counter<=50){
        NewEnemy(0,0,4);
        NewEnemy(0,2,4);
    }
    else if(counter>50 && counter<=55){
        NewEnemy(0,0,5);
        NewEnemy(1,1,5);
        NewEnemy(1,1,3);
    }
    else if(counter>55 && counter<=80){
        NewEnemy(0,0,3);
        NewEnemy(0,2,2);
        NewEnemy(1,1,4);
        NewEnemy(1,3,1);
    }
    if(counter>80 && EnemyVec.empty()){
        winlable->show();
        counter++;
        update();
    }
}
    //绘制地图
    void MainWindow::DrawMap(QPainter &painter){
        //绘制地图函数
        int map_1[16][26]={ //第一关
                            0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 1, 1, 6, 6, 0, 0, 0, 0, 0, 0, 3, 6, 1, 1, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 3, 6, 1, 1, 3, 6, 0, 0, 0, 0, 0, 0, 6, 6, 1, 1, 3, 6, 0, 0, 0,
                            0, 0, 0, 0, 0, 6, 6, 1, 1, 6, 6, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 0, 0, 0,
                            0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                            0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 6, 0, 1, 1, 0, 0, 0, 0, 3, 6, 0, 0, 0, 0, 0,
                            0, 1, 1, 0, 3, 6, 0, 1, 1, 0, 6, 6, 0, 1, 1, 0, 3, 6, 0, 6, 6, 0, 0, 0, 0, 0,
                            0, 1, 1, 0, 6, 6, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 6, 6, 1, 1, 1, 1, 1, 1, 5, 1,
                            0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
                            0, 1, 1, 0, 3, 6, 0, 0, 3, 6, 0, 0, 3, 6, 0, 0, 3, 6, 1, 1, 3, 6, 0, 0, 0, 0,
                            0, 1, 1, 0, 6, 6, 0, 0, 6, 6, 0, 0, 6, 6, 0, 0, 6, 6, 1, 1, 6, 6, 0, 0, 0, 0,
                            0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
                            0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

         };
        int map_2[16][26]={ //第二关
                            0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 3, 6, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 6, 6, 1, 1, 0, 0, 3, 6, 0, 1, 1, 0, 0, 3, 6, 0, 0, 3, 6, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 1, 1, 0, 0, 6, 6, 0, 1, 1, 0, 0, 6, 6, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                            0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 3, 6, 0, 0, 0, 0, 3, 6, 0, 0, 0, 0, 3, 6, 1, 1, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 6, 6, 1, 1, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 5, 1, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 1, 1, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        };
        int map_3[16][26]={ //第三关
                            0, 0, 0, 0, 0, 3, 6, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 6, 0, 0, 3, 6, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 1, 1, 6, 6, 0, 0, 6, 6, 1, 1, 3, 6, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 6, 0, 0, 1, 1, 6, 6, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 6, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 6, 0, 0, 3, 6, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 1, 1, 6, 6, 0, 0, 6, 6, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 3, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

          };

        int map[16][26];

        switch(LevelNum){ //不同关卡情况
        case 0:
        {
            memcpy(map,map_1,sizeof(map));
            break;
        }
        case 1:
        {
            memcpy(map,map_2,sizeof(map));
            break;
        }
        case 2:
        {
            memcpy(map,map_3,sizeof(map));
            break;
        }
        default:
        {
            break;
        }
        }

        for(int i=0;i<16;i++)
            for(int j=0;j<26;j++){
                switch (map[i][j]){
                case 0:
                {
                    painter.drawPixmap(j*40,i*40,40,40,QPixmap(":/BackGround.jpg"));
                    break;
                }
                case 1:
                {
                    painter.drawPixmap(j*40,i*40,40,40,QPixmap(":/Route.jpg"));
                    break;
                }
                case 3:
                {
                    painter.drawPixmap(j*40,i*40,80,80,QPixmap(":/Block.jpg"));
                    StationpitVec.push_back(new Stationpit(j*40,i*40));
                    break;
                }
                case 5:
                {
                    painter.drawPixmap(j*40,i*40,40,40,QPixmap(":/Route.jpg"));
                    home->x=j*40;
                    home->y=i*40;
                    break;
                }
                }
            }
                painter.drawPixmap(home->x,home->y,80,80,QPixmap(":/Home.png"));
            }

        //绘制选择框
        void MainWindow::DrawSelection(QPainter& painter){
            if(!Selec->GetDisplay()) return;
            painter.drawPixmap(Selec->GetX(),Selec->GetY(),Selec->GetWidth(),Selec->GetHeight(),QPixmap(Selec->GetImgPath())); //绘制选择框
            Subbut*ASubBut=Selec->GetSelSubBut();
            for(int i=0;i<4;i++){
                painter.drawPixmap(ASubBut[i].SubX,ASubBut[i].SubY,ASubBut[i].SubWidth,ASubBut[i].SubHeight,QPixmap(ASubBut[i].SubImgPath));
                painter.setPen(QPen(Qt::yellow,6,Qt::SolidLine)); //设置画笔
                painter.drawRect(QRect(Selec->GetX()+95,Selec->GetY()+95,80,80));
            }
         }

        //绘制敌舰
        void MainWindow::DrawEnemy(QPainter& painter){
             for(auto enemi:EnemyVec)
                 painter.drawPixmap(enemi->GetX(),enemi->GetY(),enemi->GetWidth(),enemi->GetHeight(),QPixmap(enemi->GetImgPath()));
        }

        //绘制防御站
        void MainWindow::DrawStation(QPainter& painter){
            for(auto stat:StationparVec){
                painter.drawPixmap(stat->GetUpLeftX(),stat->GetUpLeftY(),80,80,QPixmap(stat->GetBaseImgPath())); //绘制防御站底座
                if(DisplayAllRange){
                    painter.drawEllipse(QPoint(stat->GetUpLeftX()+40,stat->GetUpLeftY()+40),stat->GetRange(),stat->GetRange()); //绘制防御站攻击范围
                }

             for(auto bul:stat->GetBulletVec()){
                 painter.drawPixmap(bul->dd.x,bul->dd.y,stat->GetBulletWidth(),stat->GetBulletHeight(),QPixmap(stat->GetBulletPath())); //绘制子弹
             }

             //绘制防御站
             painter.translate(stat->GetUpLeftX()+40,stat->GetUpLeftY()+40); //设置旋转中心
             painter.rotate(stat->GetAngle()); //设置旋转角度
             painter.translate(-(stat->GetUpLeftX())-40,-(stat->GetUpLeftY())-40); //复位
             painter.drawPixmap(stat->GetX(),stat->GetY(),stat->GetWidth(),stat->GetHeight(),QPixmap(stat->GetDefImgPath()));
             painter.resetTransform(); //重置
            }
        }

        //绘制防御站攻击范围和升级按钮
        void MainWindow::DrawRangeUpgrade(QPainter& painter){
            for(auto stat:StationparVec){
                if(stat->GetUpLeftX()==DisplayRangeX && stat->GetUpLeftY()==DisplayRangeY && DisplayRange!=0){
                    painter.setPen(QPen(Qt::red)); //红色画笔
                    painter.drawEllipse(QPoint(DisplayRangeX+40,DisplayRangeY+40),stat->GetRange(),stat->GetRange());
                    painter.drawPixmap(DisplayRangeX+10,DisplayRangeY-80,60,60,QPixmap(":/Upgrade.png"));
                }
            }
         }//绘制防御站攻击范围

            void MainWindow::DrawExplosion(QPainter& painter){
                for(auto expl:ExploEffect){
                    painter.drawPixmap(expl->dd.x-(expl->ExplRangeWidth>>1),expl->dd.y-(expl->ExplRangeHeight>>1),expl->ExplRangeWidth,expl->ExplRangeHeight,QPixmap(QString(":/Explosion.png").arg(expl->index)));
                }
            }//绘制爆炸效果

            //绘图事件
            void MainWindow::paintEvent(QPaintEvent*){
                QPainter painter(this); //画家类
                painter.setRenderHint(QPainter::Antialiasing); //抗锯齿
                DrawMap(painter); //绘制地图
                DrawEnemy(painter); //绘制敌舰
                DrawStation(painter); //绘制防御站和子弹
                DrawExplosion(painter); //绘制爆炸效果
                DrawSelection(painter); //绘制选择框
                DrawRangeUpgrade(painter); //绘制防御战攻击范围和升级按钮
            }

            //鼠标点击事件
            void MainWindow::mousePressEvent(QMouseEvent*ev){
                if(ev->button()!=Qt::LeftButton) return;
                if(DisplayRange){
                    if(MouseClickRegion(DisplayRangeX+10,60,DisplayRangeY-80,60)){
                       for(auto stat:StationparVec)
                           if(stat->GetUpLeftX()==DisplayRangeX && stat->GetUpLeftY()==DisplayRangeY && DisplayRange!=0){
                               if(DeductionCoins(100)!=0) return; //花费100金币升级防御站
                               stat->SetAttack(stat->GetAttack()+15); //升级一次防御站攻击力增加15
                               stat->SetWidthHeight(stat->GetWidth()+16,stat->GetHeight()+10); //升级后防御站高度增加10，宽度增加15
                               stat->SetXY(stat->GetX()-8,stat->GetY()-5); //升级后的防御站坐标向左移动8，向下移动5
                               stat->SetGoalEnemy(NULL); //升级后防御站目标敌舰为空
                               stat->SetRange()+=15; //升级后防御站攻击范围扩大15
                               stat->SetExplRangeWidthHeight(stat->GetBulletWidth()+5,stat->GetBulletHeight()+5); //升级后子弹宽度高度都增加5
                               break;
                           }
                       Selec->SetDisplay(false); //取消显示
                       DisplayRange=false;
                       update();
                       return;
                    }
                }

                //判断子按钮的点击
                Subbut *ASubBut=Selec->GetSelSubBut();
                for(int i=0;i<4;i++)
                    if(MouseClickRegion(ASubBut[i].SubX,ASubBut[i].SubWidth,ASubBut[i].SubY,ASubBut[i].SubHeight) && Selec->GetDisplay()!=0){
                        Selec->SetDisplay(false); //取消显示

                        //根据被点击按钮的不同，将防御站子类插入父类数组
                        switch(i){
                        case 0: //防御站1

                            if(DeductionCoins(80)) return; //防御站一需要金币80
                            StationparVec.push_back(new StationOne(Selec->GetX()+110,Selec->GetY()+112,Selec->GetX()+95,Selec->GetY()+95,72,46));
                            break;

                        case 1: //防御站2

                            if(DeductionCoins(160)) return; //防御站二需要金币160
                            StationparVec.push_back(new StationTwo(Selec->GetX()+110,Selec->GetY()+112,Selec->GetX()+95,Selec->GetY()+95,72,46));
                            break;

                        case 2: //防御站3

                            if(DeductionCoins(240)) return; //防御站三需要金币240
                            StationparVec.push_back(new StationThree(Selec->GetX()+110,Selec->GetY()+112,Selec->GetX()+95,Selec->GetY()+95,72,46));
                            break;

                        case 3: //防御站总部

                            if(DeductionCoins(480)) return; //防御战总部需要金币480
                            StationparVec.push_back(new MainStation(Selec->GetX()+110,Selec->GetY()+104,Selec->GetX()+95,Selec->GetY()+95,80,70));
                            break;

                        default:

                            break;

                        }
                            update();
                            return;
                        }

                        //遍历
                        for(auto Apit:StationpitVec)
                            if(MouseClickRegion(Apit->GetX(),Apit->GetWidth(),Apit->GetY(),Apit->GetHeight())){
                                //若被点击
                                DisplayRange=false;
                                for(auto stat:StationparVec)
                                    if(stat->GetUpLeftX()==Apit->GetX() && stat->GetUpLeftY()==Apit->GetY()){
                                        DisplayRangeX=stat->GetUpLeftX();
                                        DisplayRangeY=stat->GetUpLeftY();
                                        DisplayRange=true; //显示防御站攻击范围
                                        return;
                                    }
                                Selec->ChooseStation(Apit->GetX(),Apit->GetY()); //选中防御站，选择框显示
                                update();
                                return;
                            }
                            DisplayRange=false; //取消显示
                            Selec->SetDisplay(false);
                            update();
                        }

            //释放
             MainWindow::~MainWindow(){
                 for(auto it=StationpitVec.begin();it!=StationpitVec.end();it++){
                 delete *it;
                 *it=NULL;
                 }

                 delete Selec;
                 Selec=NULL;

                 for(auto it=StationparVec.begin();it!=StationparVec.end();it++){
                 delete *it;
                 *it=NULL;
                 }

                 for(auto it=EnemyVec.begin();it!=EnemyVec.end();it++){
                 delete *it;
                 *it=NULL;
                 }

                 for(auto it=ExploEffect.begin();it!=ExploEffect.end();it++){
                 delete *it;
                 *it=NULL;
                 }
                 delete home;
            }
